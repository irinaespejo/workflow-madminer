stages:
  - name: configurate
    dependencies: [init]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        workdir: '{workdir}'
        inputfile: {stages: init, output: inputfile, unwrap: true}
      step: {$ref: 'steps.yml#/configurate'}

  - name: generate
    dependencies: [configurate]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        workdir: '{workdir}'
        inputfile: {stages: init, output: inputfile, unwrap: true}
        configfile: {stages: 'configurate', output: config_file, unwrap: true}
        njobs: {stages: 'init', output: njobs}
        madminer_dir_signal: '/madminer/code/mg_processes/signal/madminer'
        madminer_dir_bkg: '/madminer/code/mg_processes/background/madminer'
      step: {$ref: 'steps.yml#/generate'}

  - name: mgpythia
    dependencies: [generate]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        mgworkdir: '{workdir}'
        eventfolder: {stages: 'generate', output: script_files, unwrap: true}
        MG_directory: '/madminer/software/MG5_aMC_v2_6_2'
        MG_process_directory: '/madminer/code/mg_processes'
        log_directory: '/madminer/code/logs'
      scatter:
        method: zip
        parameters: [eventfolder]
      step: {$ref: 'steps.yml#/mg_pythia'}

  - name: delphes
    dependencies: [mgpythia]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        dworkdir: '{workdir}'
        delphes_configfile: {stages: 'configurate', output: config_file, unwrap: true}
        inputfile: {stages: init, output: inputfile, unwrap: true}
        eventfile: {stages: 'mgpythia', output: postrun_file, unwrap: true}
      step: {$ref: steps.yml#/delphes}
      scatter:
        method: zip
        parameters: [eventfile]

  - name: combine
    dependencies: [delphes]
    scheduler:
      scheduler_type: 'singlestep-stage'
      parameters:
        cworkdir: '{workdir}'
        inputfiles: {stages: 'delphes', output: dpostrun_file}
      step: {$ref: 'steps.yml#/combine'}


  - name: sampling
    dependencies: [combine]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        sampleworkdir: '{workdir}'
        n_trainsamples: {stages: init, output: ntrainsamples}
        input_file: {stages: init, output: inputfile, unwrap: true}
        data_file: {stages: combine, output: data_file, unwrap: true}
      step: {$ref: steps.yml#/sampling}
      
  - name: training
    dependencies: [sampling]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        trainworkdir: '{workdir}'
        input_file: {stages: init, output: inputfile, unwrap: true}
        trainfolder: {stages: sampling, output: sampling_file, unwrap: true}
      scatter:
        method: zip
        parameters: [trainfolder]
      step: {$ref: 'steps.yml#/training'}

  - name: evaluating
    dependencies: [training]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        trained_file: {stages: training, output: trained_file, unwrap: true}
        input_file: {stages: init, output: inputfile, unwrap: true}
        data_file: {stages: combine, output: data_file, unwrap: true}
        resultsfile: '{workdir}/Results.tar.gz'
        evalworkdir: '{workdir}'
      scatter:
        method: zip
        parameters: [trained_file]
      step: {$ref: 'steps.yml#/evaluating'}

  - name: plotting
    dependencies: [evaluating]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        results_file: {stages: evaluating, output: results_file, unwrap: true}
        input_file: {stages: init, output: inputfile, unwrap: true}
        plotworkdir: '{workdir}'
        outputfile: '{workdir}/outputfile.txt'
      step: {$ref: 'steps.yml#/plotting'}
