common_env_physics: &common_env_physics
    environment_type: 'docker-encapsulated'
    image: madminertool/docker-madminer-physics
    imagetag: 'latest'
    
common_env_ml: &common_env_ml
    environment_type: 'docker-encapsulated'
    image: madminertool/docker-madminer-ml
    imagetag: 'latest'
    

configurate:
  environment: *common_env_physics
  process:
    process_type: interpolated-script-cmd
    script: |
      python /madminer/code/configurate.py {inputfile}
      cp -R /madminer/data/*.h5 {workdir}
  publisher:
    publisher_type: 'fromglob-pub'
    outputkey: config_file
    globexpression: '*.h5' 

generate:
  environment: *common_env_physics
  process:
    process_type: interpolated-script-cmd
    script: |
      mkdir -p /madminer/code/logs
      python /madminer/code/generate.py {inputfile} {njobs} {configfile}
      mkdir {madminer_dir_signal}/zips
      for i in `seq 0 $(({njobs}-1))`; do tar -czvf /madminer/folder_$i.tar.gz {madminer_dir_signal}/scripts/run_$i.sh {madminer_dir_signal}/cards/*$i.dat ; done
      cp -R /madminer/folder_*.tar.gz {workdir}
  publisher:
    publisher_type: 'fromglob-pub'
    outputkey: script_files
    globexpression: 'folder_*.tar.gz'


mg_pythia:
  environment: *common_env_physics
  process:
    process_type: interpolated-script-cmd 
    script: |
      mkdir /madminer/extract
      tar -xvf {eventfolder} -C /madminer/extract
      cp /madminer/extract/madminer/code/mg_processes/signal/madminer/scripts/run*.sh {MG_process_directory}/signal/madminer/scripts
      cp /madminer/extract/madminer/code/mg_processes/signal/madminer/cards/*.dat  {MG_process_directory}/signal/madminer/cards
      mkdir {log_directory}
      sh {MG_process_directory}/signal/madminer/scripts/run*.sh {MG_directory} {MG_process_directory}/signal {log_directory}
      tar -czvf /madminer/code/mg_processes/signal/Events/Events.tar.gz /madminer/code/mg_processes/signal/Events/*/*  /madminer/code/mg_processes/signal/madminer/cards/benchmark_*.dat
      cp /madminer/code/mg_processes/signal/Events/Events.tar.gz {mgworkdir} 
  publisher:
    publisher_type: 'fromglob-pub'
    outputkey: postrun_file
    globexpression: 'Events.tar.gz'
  

delphes:
  environment: *common_env_physics
  process:
    process_type: interpolated-script-cmd 
    script: |
      mkdir /madminer/extract
      tar -xvf {eventfile} -C /madminer/extract
      tar -xvf {delphes_configfile} -C /madminer/extract
      touch /madminer/log_delphes.log
      mkdir /madminer/data
      mv /madminer/extract/madminer/code/mg_processes/signal/madminer/cards/benchmark_*.dat /madminer/extract/madminer/code/mg_processes/signal/madminer/cards/benchmark.dat
      python /madminer/code/delphes.py {delphes_configfile} /madminer/extract/madminer/code/mg_processes/signal/Events/* {inputfile} /madminer/extract/madminer/code/mg_processes/signal/madminer/cards/benchmark.dat
      cp  -R /madminer/data/* {dworkdir}
  publisher:
    publisher_type: 'fromglob-pub'
    outputkey: dpostrun_file
    globexpression: 'madminer_example_with_data_*.h5' 


combine:
  environment: *common_env_physics
  process:
    process_type: interpolated-script-cmd
    script: |
      echo '{inputfiles}'
      python /madminer/code/combine.py '{inputfiles}'
      cp -R /madminer/combined_delphes.h5 {cworkdir}
  publisher:
    publisher_type: 'fromglob-pub'
    outputkey: data_file
    globexpression: 'combined_delphes.h5'

sampling:
  environment: *common_env_ml
  process:
    process_type: interpolated-script-cmd
    script: |
      mkdir /madminer/data
      mkdir /madminer/data/samples
      python /madminer/code/configurate_ml.py {n_trainsamples} {data_file} {input_file}
      cd /madminer/data
      cp -R /madminer/data/Samples_* {sampleworkdir}
  publisher:
    publisher_type: 'fromglob-pub'
    outputkey: sampling_file
    globexpression: 'Samples_*'
  

training:
  environment: *common_env_ml
  process:
    process_type: interpolated-script-cmd 
    script: |
      mkdir /madminer/models
      cp -R {trainfolder} /madminer
      python /madminer/code/train.py /madminer/Samples_*/ {input_file}
      tar -czvf /madminer/Model.tar.gz /madminer/models
      cp -R /madminer/Model.tar.gz  {trainworkdir}
  publisher:
    publisher_type: 'fromglob-pub'
    outputkey: trained_file
    globexpression: 'Model.tar.gz'
  
 
evaluating:
  environment: *common_env_ml
  process:
    process_type: interpolated-script-cmd
    script: |
      mkdir /madminer/models
      mkdir /madminer/test
      mkdir /madminer/results
      mkdir /madminer/rates/
      tar -xvf {trained_file} -C /madminer/models --strip-components 2
      python /madminer/code/evaluation.py {input_file} /madminer/models/* {data_file}
      tar -czvf /madminer/Results.tar.gz /madminer/results /madminer/rates /madminer/test /madminer/models
      cp -R /madminer/Results.tar.gz  {evalworkdir}
      ls -lR
  publisher:
    publisher_type: interpolated-pub
    publish:
      results_file: '{evalworkdir}/Results.tar.gz'
  


plotting:
  environment: *common_env_ml
  process:
    process_type: interpolated-script-cmd
    script: |
      mkdir /madminer/plots
      echo hello
      for file in {results_file}; do tar -xvf "$file" -C .  --strip-components 1 ; done
      python /madminer/code/plotting.py {input_file} 
      ls -lR
      cp -R /madminer/plots {plotworkdir}
  publisher:
    publisher_type: interpolated-pub
    publish:
      outputfile: '{outputfile}'
  
