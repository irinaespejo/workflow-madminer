stages:
  - name: configurate
    dependencies: [init]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        workdir: '{workdir}'
        inputfile: {stages: init, output: inputfile, unwrap: true}
      step: {$ref: 'steps.yml#/configurate'}

  - name: generate
    dependencies: [configurate]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        workdir: '{workdir}'
        inputfile: {stages: init, output: inputfile, unwrap: true}
        configfile: {stages: 'configurate', output: config_file, unwrap: true}
        njobs: {stages: 'init', output: njobs}
        madminer_dir_signal: '/home/code/mg_processes/signal/madminer'
        madminer_dir_bkg: '/home/code/mg_processes/background/madminer'
      step: {$ref: 'steps.yml#/generate'}

  - name: mgpythia
    dependencies: [generate]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        mgworkdir: '{workdir}'
        eventfolder: {stages: 'generate', output: script_files, unwrap: true}
        MG_directory: '/home/software/MG5_aMC_v2_6_2'
        MG_process_directory: '/home/code/mg_processes'
        log_directory: '/home/code/logs'
      scatter:
        method: zip
        parameters: [eventfolder]
      step: {$ref: 'steps.yml#/mg_pythia'}

  - name: delphes
    dependencies: [mgpythia]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        dworkdir: '{workdir}'
        delphes_configfile: {stages: 'configurate', output: config_file, unwrap: true}
        inputfile: {stages: init, output: inputfile, unwrap: true}
        eventfile: {stages: 'mgpythia', output: postrun_file, unwrap: true}
      step: {$ref: steps.yml#/delphes}
      scatter:
        method: zip
        parameters: [eventfile]


#- name: combine
#  dependencies: [delphes]
#  scheduler:
#    scheduler_type: 'singlestep-stage'
#    parameters:
#      inputfiles: {steps: 'delphes', output: dpostrun_file}
#      outputfile: '{workdir}/output.txt'
#    step: {$ref: 'steps.yml#/combine'}

# - name: sampling
#   dependencies: [delphes]
#   scheduler:
#     scheduler_type: multistep-stage
#     parameters:
#       sampleworkdir: '{workdir}'
#       n_trainsamples: {step: init, output: ntrainsamples}
#       input_file: {step: configurate, output: config_file}
#       combined_file: {stages: 'delphes', output: dpostrun_file, unwrap: true}
#       outputfile: '{workdir}/output.txt'
#     step: {$ref: steps.yml#/sampling}
#     scatter:
#       method: zip
#       parameters: [combined_file]

#  - name: training
#    dependencies: [sampling]
#    scheduler:
#      scheduler_type: multistep-stage
#      parameters:
#        trainworkdir: '{workdir}'
#        input_file: {step: init, output: inputmlfile}
#        trainfolder: {step: 'sampling', output: sampling_file, unwrap: true}
#        trained_file: '{workdir}/trained_model.tar.gz'
#      scatter:
#        method: zip
#        parameters: [trainfolder]
#      step: {$ref: 'steps.yml#/training'}

